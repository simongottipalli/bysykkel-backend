// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/api/handlers/stations.go
//
// Generated by this command:
//
//	mockgen -source=./internal/api/handlers/stations.go -destination=./internal/api/handlers/mocks/bysykkel_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	clients "bysykkel/internal/clients"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBySykkelClient is a mock of BySykkelClient interface.
type MockBySykkelClient struct {
	ctrl     *gomock.Controller
	recorder *MockBySykkelClientMockRecorder
}

// MockBySykkelClientMockRecorder is the mock recorder for MockBySykkelClient.
type MockBySykkelClientMockRecorder struct {
	mock *MockBySykkelClient
}

// NewMockBySykkelClient creates a new mock instance.
func NewMockBySykkelClient(ctrl *gomock.Controller) *MockBySykkelClient {
	mock := &MockBySykkelClient{ctrl: ctrl}
	mock.recorder = &MockBySykkelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBySykkelClient) EXPECT() *MockBySykkelClientMockRecorder {
	return m.recorder
}

// GetStationInfo mocks base method.
func (m *MockBySykkelClient) GetStationInfo(ctx context.Context) (*clients.StationInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationInfo", ctx)
	ret0, _ := ret[0].(*clients.StationInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationInfo indicates an expected call of GetStationInfo.
func (mr *MockBySykkelClientMockRecorder) GetStationInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationInfo", reflect.TypeOf((*MockBySykkelClient)(nil).GetStationInfo), ctx)
}

// GetStationStatus mocks base method.
func (m *MockBySykkelClient) GetStationStatus(ctx context.Context) (*clients.StationStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationStatus", ctx)
	ret0, _ := ret[0].(*clients.StationStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationStatus indicates an expected call of GetStationStatus.
func (mr *MockBySykkelClientMockRecorder) GetStationStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationStatus", reflect.TypeOf((*MockBySykkelClient)(nil).GetStationStatus), ctx)
}
